# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyrebase
import cv2
import cv2 as cv
import urllib.request
import numpy as np
import os
import argparse
import sys
import time
from threading import Thread
import importlib.util

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(513, 266)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 10, 371, 41))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 80, 47, 21))
        self.label_2.setObjectName("label_2")
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(260, 80, 47, 21))
        self.label_3.setObjectName("label_3")
        
        self.ip1 = QtWidgets.QLabel(self.centralwidget)
        self.ip1.setGeometry(QtCore.QRect(30, 110, 221, 21))
        self.ip1.setFrameShape(QtWidgets.QFrame.Box)
        self.ip1.setText("")
        self.ip1.setObjectName("ip1")
        
        self.ip2 = QtWidgets.QLabel(self.centralwidget)
        self.ip2.setGeometry(QtCore.QRect(260, 110, 221, 21))
        self.ip2.setFrameShape(QtWidgets.QFrame.Box)
        self.ip2.setText("")
        self.ip2.setObjectName("ip2")
        
        self.pb1 = QtWidgets.QPushButton(self.centralwidget)
        self.pb1.setGeometry(QtCore.QRect(30, 140, 221, 71))
        self.pb1.setObjectName("pb1")
        self.pb1.clicked.connect(self.buka1)
        
        self.pb2 = QtWidgets.QPushButton(self.centralwidget)
        self.pb2.setGeometry(QtCore.QRect(260, 140, 221, 71))
        self.pb2.setObjectName("pb2")
        self.pb2.clicked.connect(self.buka2)
        
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 220, 361, 16))
        self.label_4.setObjectName("label_4")
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 80, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.reload1)
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(400, 80, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        config = {
            "apiKey" : "AIzaSyDuV1BazqBbp_VvSRu32of6J9-MI2aZW7g",
            "authDomain" : "esp32camfirebase.firebaseapp.com",
            "databaseURL" : "https://esp32camfirebase.firebaseio.com/",
            "storageBucket": "esp32camfirebase.appspot.com"
            }

        firebase = pyrebase.initialize_app(config)

        db = firebase.database()

        #db.child("IP").set(data)
        a = db.child("IP").get()
        self.ip1.setText(str(a.val()))
        print(a.val())

    def reload1(self):
        config = {
            "apiKey" : "AIzaSyDuV1BazqBbp_VvSRu32of6J9-MI2aZW7g",
            "authDomain" : "esp32camfirebase.firebaseapp.com",
            "databaseURL" : "https://esp32camfirebase.firebaseio.com/",
            "storageBucket": "esp32camfirebase.appspot.com"
            }

        firebase = pyrebase.initialize_app(config)

        db = firebase.database()

        a = db.child("IP").get()
        self.ip1.setText(str(a.val()))
        print(a.val())

    def buka1(self):
        cap = cv.VideoCapture(0)
        #url = self.ip1.text()
        #cv.namedWindow("ESP32CAM 1", cv.WINDOW_AUTOSIZE)
        face = cv.CascadeClassifier('./haarcascade/haarcascade_frontalface_default.xml');
        
        while True:
            #imgresponse = urllib.request.urlopen(url)
            #imgnp = np.array(bytearray(imgresponse.read()),dtype=np.uint8)
            #img = cv.imdecode(imgnp,-1)
            ret, frame = cap.read()
            
            gray = cv.cvtColor(frame,cv.COLOR_BGR2GRAY)
            faces = face.detectMultiScale(gray,1.3,5);
            for (x,y,w,h) in faces:
                cv.rectangle(frame,(x,y), (x+w,y+h), (0,255,0),2)

            cv.imshow("ESP32CAM 1", frame)
            key = cv.waitKey(5)
            if key == ord('q'):
                break
        cv.destroyAllWindows

    def buka2(self):
        url='http://192.168.100.39/cam-hi.jpg'

        class VideoStream:
            """Camera object that controls video streaming from the Picamera"""
            def __init__(self,resolution=(320,240),framerate=30):
                # Initialize the PiCamera and the camera image stream
                self.stream = cv2.VideoCapture(0)
                ret = self.stream.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))
                ret = self.stream.set(3,resolution[0])
                ret = self.stream.set(4,resolution[1])
            
                # Read first frame from the stream
                (self.grabbed, self.frame) = self.stream.read()

                # Variable to control when the camera is stopped
                self.stopped = False

            def start(self):
                # Start the thread that reads frames from the video stream
                Thread(target=self.update,args=()).start()
                return self

            def update(self):
                # Keep looping indefinitely until the thread is stopped
                while True:
                    # If the camera is stopped, stop the thread
                    if self.stopped:
                        # Close camera resources
                        self.stream.release()
                        return

                    # Otherwise, grab the next frame from the stream
                    (self.grabbed, self.frame) = self.stream.read()

            def read(self):
                # Return the most recent frame
                return self.frame

            def stop(self):
                # Indicate that the camera and thread should be stopped
                self.stopped = True

        # Define and parse input arguments
        parser = argparse.ArgumentParser()
        parser.add_argument('--modeldir', help='Folder the .tflite file is located in',
                            required=True)
        parser.add_argument('--graph', help='Name of the .tflite file, if different than detect.tflite',
                            default='detect.tflite')
        parser.add_argument('--labels', help='Name of the labelmap file, if different than labelmap.txt',
                            default='labelmap.txt')
        parser.add_argument('--threshold', help='Minimum confidence threshold for displaying detected objects',
                            default=0.5)
        parser.add_argument('--resolution', help='Desired webcam resolution in WxH. If the webcam does not support the resolution entered, errors may occur.',
                            default='1280x720')
        parser.add_argument('--edgetpu', help='Use Coral Edge TPU Accelerator to speed up detection',
                            action='store_true')

        args = parser.parse_args()

        MODEL_NAME = args.modeldir
        GRAPH_NAME = args.graph
        LABELMAP_NAME = args.labels
        min_conf_threshold = float(args.threshold)
        resW, resH = args.resolution.split('x')
        imW, imH = int(resW), int(resH)
        use_TPU = args.edgetpu

        # Import TensorFlow libraries
        # If tflite_runtime is installed, import interpreter from tflite_runtime, else import from regular tensorflow
        # If using Coral Edge TPU, import the load_delegate library
        pkg = importlib.util.find_spec('tflite_runtime')
        if pkg:
            from tflite_runtime.interpreter import Interpreter
            if use_TPU:
                from tflite_runtime.interpreter import load_delegate
        else:
            from tensorflow.lite.python.interpreter import Interpreter
            if use_TPU:
                from tensorflow.lite.python.interpreter import load_delegate

        # If using Edge TPU, assign filename for Edge TPU model
        if use_TPU:
            # If user has specified the name of the .tflite file, use that name, otherwise use default 'edgetpu.tflite'
            if (GRAPH_NAME == 'detect.tflite'):
                GRAPH_NAME = 'edgetpu.tflite'       

        # Get path to current working directory
        CWD_PATH = os.getcwd()

        # Path to .tflite file, which contains the model that is used for object detection
        PATH_TO_CKPT = os.path.join(CWD_PATH,MODEL_NAME,GRAPH_NAME)

        # Path to label map file
        PATH_TO_LABELS = os.path.join(CWD_PATH,MODEL_NAME,LABELMAP_NAME)

        # Load the label map
        with open(PATH_TO_LABELS, 'r') as f:
            labels = [line.strip() for line in f.readlines()]

        # Have to do a weird fix for label map if using the COCO "starter model" from
        # https://www.tensorflow.org/lite/models/object_detection/overview
        # First label is '???', which has to be removed.
        if labels[0] == '???':
            del(labels[0])

        # Load the Tensorflow Lite model.
        # If using Edge TPU, use special load_delegate argument
        if use_TPU:
            interpreter = Interpreter(model_path=PATH_TO_CKPT,
                                  experimental_delegates=[load_delegate('libedgetpu.so.1.0')])
            print(PATH_TO_CKPT)
        else:
            interpreter = Interpreter(model_path=PATH_TO_CKPT)

        interpreter.allocate_tensors()

        # Get model details
        input_details = interpreter.get_input_details()
        output_details = interpreter.get_output_details()
        height = input_details[0]['shape'][1]
        width = input_details[0]['shape'][2]

        floating_model = (input_details[0]['dtype'] == np.float32)

        input_mean = 127.5
        input_std = 127.5

        # Initialize frame rate calculation
        frame_rate_calc = 1
        freq = cv2.getTickFrequency()

        # Initialize video stream
        #Avideostream = VideoStream(resolution=(imW,imH),framerate=30).start()
        time.sleep(1)

        #for frame1 in camera.capture_continuous(rawCapture, format="bgr",use_video_port=True):
        while True:

            # Start timer (for calculating frame rate)
            t1 = cv2.getTickCount()

            # Grab frame from video stream
            #frame1 = videostream.read()
            imgresponse=urllib.request.urlopen(url)
            imgnp=np.array(bytearray(imgresponse.read()),dtype=np.uint8)
            img=cv2.imdecode(imgnp,-1)
            # Acquire frame and resize to expected shape [1xHxWx3]
            frame = img.copy()
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame_resized = cv2.resize(frame_rgb, (width, height))
            input_data = np.expand_dims(frame_resized, axis=0)


            # Normalize pixel values if using a floating model (i.e. if model is non-quantized)
            if floating_model:
                input_data = (np.float32(input_data) - input_mean) / input_std

            # Perform the actual detection by running the model with the image as input
            interpreter.set_tensor(input_details[0]['index'],input_data)
            interpreter.invoke()

            # Retrieve detection results
            boxes = interpreter.get_tensor(output_details[0]['index'])[0] # Bounding box coordinates of detected objects
            classes = interpreter.get_tensor(output_details[1]['index'])[0] # Class index of detected objects
            scores = interpreter.get_tensor(output_details[2]['index'])[0] # Confidence of detected objects
            #num = interpreter.get_tensor(output_details[3]['index'])[0]  # Total number of detected objects (inaccurate and not needed)

            # Loop over all detections and draw detection box if confidence is above minimum threshold
            for i in range(len(scores)):
                if ((scores[i] > min_conf_threshold) and (scores[i] <= 1.0)):

                    # Get bounding box coordinates and draw box
                    # Interpreter can return coordinates that are outside of image dimensions, need to force them to be within image using max() and min()
                    ymin = int(max(1,(boxes[i][0] * imH)))
                    xmin = int(max(1,(boxes[i][1] * imW)))
                    ymax = int(min(imH,(boxes[i][2] * imH)))
                    xmax = int(min(imW,(boxes[i][3] * imW)))
            
                    cv2.rectangle(frame, (xmin,ymin), (xmax,ymax), (10, 255, 0), 2)

                    # Draw label
                    object_name = labels[int(classes[i])] # Look up object name from "labels" array using class index
                    label = '%s: %d%%' % (object_name, int(scores[i]*100)) # Example: 'person: 72%'
                    labelSize, baseLine = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2) # Get font size
                    label_ymin = max(ymin, labelSize[1] + 10) # Make sure not to draw label too close to top of window
                    cv2.rectangle(frame, (xmin, label_ymin-labelSize[1]-10), (xmin+labelSize[0], label_ymin+baseLine-10), (255, 255, 255), cv2.FILLED) # Draw white box to put label text in
                    cv2.putText(frame, label, (xmin, label_ymin-7), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2) # Draw label text

            # Draw framerate in corner of frame
            cv2.putText(frame,'FPS: {0:.2f}'.format(frame_rate_calc),(30,50),cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,0),2,cv2.LINE_AA)

            # All the results have been drawn on the frame, so it's time to display it.
            cv2.imshow('Object detector', frame)

            # Calculate framerate
            t2 = cv2.getTickCount()
            time1 = (t2-t1)/freq
            frame_rate_calc= 1/time1

            # Press 'q' to quit
            if cv2.waitKey(1) == ord('q'):
                break

            # Clean up
            #cv2.destroyAllWindows()
            #videostream.stop()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Food Calories Recognition"))
        self.label.setText(_translate("MainWindow", "REMOTE FOOD CALORIES"))
        self.label_2.setText(_translate("MainWindow", "IPCAM 1"))
        self.label_3.setText(_translate("MainWindow", "IPCAM 2"))
        self.pb1.setText(_translate("MainWindow", "CONNECT\n"
        "ESP32CAM 1"))
        self.pb2.setText(_translate("MainWindow", "CONNECT\n"
        " ESP32CAM 2"))
        self.label_4.setText(_translate("MainWindow", "Catatan: Mohon reset ulang perangkat ESP32CAM sebelum memulai sistem"))
        self.pushButton.setText(_translate("MainWindow", "Reload"))
        self.pushButton_2.setText(_translate("MainWindow", "Reload"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
